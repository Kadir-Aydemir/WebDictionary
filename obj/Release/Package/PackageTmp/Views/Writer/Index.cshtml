@model EntityLayer.Concrete.Blocked
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Kanit&display=swap');

    table {
        font-family: 'Kanit', sans-serif;
    }
  
</style>

@Html.Action("WriterPartial", "Writer")

<button type="button" style="display:none" data-toggle="modal" data-target="#blockmodal" id="btn_modalblock" name="btn_modalblock">
</button>

<div class="modal fade" id="blockmodal">
    <div class="modal-dialog">
        <div class="modal-content" style="color: #383A3E ">
            <div class="modal-header">
                <h4 class="modal-title">
                    <i class="fas fa-shield-alt">
                    </i> Why is the writer blocked?
                </h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Index", "Writer", FormMethod.Post))
                {
                    <div class="form-group">
                        @Html.Label("How many days?")
                        <input type="number" name="dayCount" class="form-control" min="1" value="30"/>
                        @Html.ValidationMessageFor(x=>x.ExpireDate, "", new { @style = "color:red" })
                        <br />
                        @Html.Label("Reason")
                        @Html.TextAreaFor(x => x.Reason, 4, 30, new { @class = "form-control", @maxlength = "200" })
                        @Html.ValidationMessageFor(x => x.Reason, "", new { @style = "color:red" })
                        <br />
                        @Html.HiddenFor(x => x.WriterID)
                        <div class="text-right">
                            <button type="submit" class="btn btn-danger" name="btnInsert" value="insert" style="margin-top: 10px;">Block</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        $(document).on('click', '.block-writer', function () {
            var id = $(this).data('id');

            $('#blockmodal').find('#WriterID').val(id);

            $("#btn_modalblock").click();
        });
    </script>
    <script>
        $(document).ready(function () {
            $('#blockmodal').on('hidden.bs.modal', function () {
                $(this).removeData('bs.modal');
            });
        });

        function showModal() {
            var id = $(this).data('id');

            $('#blockmodal').find('#WriterID').val(id);

            $('#blockmodal').load('/Writer/Index');
            $('#blockmodal').modal('show');
        }
    </script>
    @if (ViewBag.alert == "true")
    {
        <script>
            $(document).ready(function () {
                $("#btn_modalblock").click();
            });
        </script>
    }
    @if (ViewBag.insertresult == "true")
    {
        <script>
            $(document).ready(function () {
                Swal.fire({
                    title: 'Success',
                    text: 'The Writer was blocked successfully.',
                    icon: 'success'
                });
            });
        </script>
    }

    <script>
        $(document).on('click', '.delete-writer', function () {
            var id = $(this).data('id');
            var url = '@Url.Action("Delete", "writer")' + '/' + id;

            Swal.fire({
                title: 'Warning!',
                text: 'Are you sure you want to delete this writer?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: 'POST',
                        url: url,
                        success: function() {
                            Swal.fire({
                                title: 'Deleted!',
                                text: 'Writer was deleted successfully.',
                                icon: 'success'
                            }).then((result) => {
                                location.reload();
                            });
                        },
                        error: function() {
                            Swal.fire({
                                title: 'Error!',
                                text: 'An error occurred, the writer could not be deleted.',
                                icon: 'error'
                            });
                        }
                    });
                }
            });
        });
    </script>

    <script>
        $(document).on('click', '.show-details', function () {
                var writerid = $(this).data('id');
                var url = '@Url.Action("Show", "Writer")' + '/' + writerid;
                $.ajax({
                    type: 'GET',
                    url: url,
                    dataType: 'json',
                    success: function (data) {
                        var status;
                        var color;
                        var image;
                        if (data.WriterRemove == 0) {
                            status = 'Active';
                            color = 'badge-success';
                        }
                        else {
                            status = 'Removed';
                            color = 'badge-danger';
                        }
                        if (data.WriterImage != null) {
                            var base64String = btoa(String.fromCharCode.apply(null, new Uint8Array(data.WriterImage)));
                            image = 'data:image/jpeg;base64,' + base64String;
                        } else {
                             image = '/Resources/defaultperson.png';
                        }

                        Swal.fire({
                            title: `${data.WriterName} ${data.WriterSurname} <span class="badge ${color} badge-sm">${status}</span ><br>${data.WriterTitle}`,
                            html: `About: ${data.WriterAbout}<br><br>📪 <b>${data.WriterMail}</b> <br><br> <a href="/DictionaryPanelWriter/Index/${writerid}" target="_blank" >Go Dictionary Profile</a>`,
                            imageUrl: image,
                            imageWidth: 85,
                            imageHeight: 85,
                            imageAlt: 'Custom image',
                            width: 600,
                            padding: '3em',
                            showCancelButton: true,
                            showConfirmButton: false,
                            cancelButtonText: 'Close',
                            cancelButtonColor: '#6459DD',
                            color: '#716add',
                            background: '#fff url(/AdminLTE-3.0.4/images/alertbackground4444.jpg)',
                            backdrop: `
                             rgba(0,0,123,0.4)
                             url("/AdminLTE-3.0.4/images/nyancatshort.gif")
                             left top
                             no-repeat
                             `
                        })
                    },
                    error: function (xhr, status, error) {
                        console.log("Error: " + xhr.responseText);
                        Swal.fire({
                            title: status + '!',
                            text: 'An error occurred, Writer could not be show. ' + error,
                            icon: 'error'
                        });

                    }
                });
        });
    </script>

    <script>
        $(document).ready(function () {
            $('#Writer').addClass('active');
        });
    </script>
}

